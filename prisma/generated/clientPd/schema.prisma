// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  output   = "./generated/clientPd"
}

// datasource db {
//   provider = "postgresql"
//   url = env("DATABASE_URL")
// }

datasource db {
  provider = "postgresql"
  url = "postgres://default:1VFdspRhbLa4@ep-divine-pine-13132678-pooler.ap-southeast-1.postgres.vercel-storage.com:5432/verceldb?pgbouncer=true&connect_timeout=15" // uses connection pooling
  directUrl = "postgres://default:1VFdspRhbLa4@ep-divine-pine-13132678.ap-southeast-1.postgres.vercel-storage.com:5432/verceldb" // uses a direct connection
}



model Product {
  id                  Int      @id @default(autoincrement())
  productId           String   @unique
  productName         String
  productMainCategory String
  productSubCategory  String
  productImgLink      String
  productSize         String
  productGender       String
  productColor        String
  productStock        Int
  productDesc         String
  productPrice        Float
  viewsCount          Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  featured            Boolean  @default(false)
  reviews             Review[]
  cart                Cart[]
  orderItem           OrderItem[]
}

model User {
  id                  Int      @id @default(autoincrement())
  userId              String   @unique
  name                String 
  email               String   @unique
  password            String
  salt                String
  avatar              String
  role                String   @default("user")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  reviews             Review[]
  cart                Cart[]
  order               Order[]
  address             Address[]
  article             Article[]
}

model Cart {
  id          Int      @id @default(autoincrement())
  userId      String
  productId   String
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [userId])
  product     Product  @relation(fields: [productId], references: [productId])
}

model Order {
  id            Int         @id @default(autoincrement())
  orderId       String      @unique
  userId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  paymentMethod String
  status        String      @default("Ordered")
  orderedItems  OrderItem[]
  review        Review[]
  user          User        @relation(fields: [userId], references: [userId])
  address       Address[]
}

model Address {
  id            Int        @id @default(autoincrement())
  userId        String
  orderId       String
  name          String
  phone         String
  email         String
  country       String
  city          String
  district      String
  address       String
  zip           String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  order         Order       @relation(fields: [orderId], references: [orderId])
  user          User        @relation(fields: [userId], references: [userId])
}

model OrderItem {
  id            Int      @id @default(autoincrement())
  orderId       String
  productId     String
  quantity      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       Product  @relation(fields: [productId], references: [productId])
  order         Order    @relation(fields: [orderId], references: [orderId])
}

model Review {
  id                  Int      @id @default(autoincrement())
  text                String
  rating              Int
  productId           String  
  orderId             String
  userId              String 
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  order               Order @relation(fields: [orderId], references: [orderId])
  user                User     @relation(fields: [userId], references: [userId])
  product             Product  @relation(fields: [productId], references: [productId])
}


model Article {
  id                  Int @id @default(autoincrement())
  title               String
  content             String
  author              String
  userId              String
  thumbnail           String
  viewsCount          Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [userId])
}

